# cve_cli/cli.py

from enum import Enum
import typer
import math
from typing_extensions import Annotated

# Import c√°c th√†nh ph·∫ßn t·ª´ 'rich'
from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.align import Align
from rich.table import Table
# Import c√°c d·ªãch v·ª• qu√©t v√† t√¨m ki·∫øm
from rich import print as rprint
from zmq import Enum

from cve_cli.services.elastic_service import search_cves
from cve_cli.services.rag_service import get_ai_solution
from cve_cli.services.nmap_service import run_nmap_scan
from cve_cli.services.snyk_service import run_snyk_scan
from cve_cli.services.trivy_service import run_trivy_scan
from cve_cli.services.nuclei_service import run_nuclei_scan

# Kh·ªüi t·∫°o console c·ªßa rich
console = Console()

# --- C·∫¨P NH·∫¨T: Th√™m m√¥ t·∫£ chi ti·∫øt v√† epilog cho ·ª©ng d·ª•ng ---
app = typer.Typer(
    name="SecTool",
    help="ü§ñ **M·ªôt c√¥ng c·ª• d√≤ng l·ªánh m·∫°nh m·∫Ω ƒë·ªÉ t√¨m ki·∫øm, ph√¢n t√≠ch v√† qu√©t l·ªó h·ªïng CVE.**",
    rich_markup_mode="markdown",
    epilog="Ph√°t tri·ªÉn b·ªüi Th4n6_n3k. S·ª≠ d·ª•ng `[COMMAND] --help` ƒë·ªÉ xem chi ti·∫øt."
)

# --- M·ªöI: H√†m hi·ªÉn th·ªã banner ch√†o m·ª´ng ---
def display_welcome_banner():
    """Hi·ªÉn th·ªã m·ªôt banner ch√†o m·ª´ng ƒë·∫πp m·∫Øt khi ch·∫°y tool."""
    console.clear()
    title = Align.center(
        Text("üõ°Ô∏è  CVE Client Toolkit  üõ°Ô∏è", style="bold magenta"),
        vertical="middle"
    )
    
    panel = Panel(
        title,
        title_align="center",
        subtitle="[dim]G√µ --help ƒë·ªÉ xem c√°c l·ªánh[/dim]",
        subtitle_align="center",
        border_style="green",
        padding=(1, 4)
    )
    console.print(panel)
    console.print(Align.center("[bold]Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi b·ªô c√¥ng c·ª• CVE d√≤ng l·ªánh![/bold]"))
    console.print(Align.center("D∆∞·ªõi ƒë√¢y l√† c√°c l·ªánh c√≥ s·∫µn:"))

# --- M·ªöI: H√†m callback ch√≠nh, ch·∫°y tr∆∞·ªõc m·ªói l·ªánh ---
@app.callback(invoke_without_command=True)
def main(ctx: typer.Context):
    """
    H√†m callback ch√≠nh c·ªßa ·ª©ng d·ª•ng.
    S·∫Ω hi·ªÉn th·ªã banner n·∫øu kh√¥ng c√≥ l·ªánh n√†o ƒë∆∞·ª£c g·ªçi.
    """
    if ctx.invoked_subcommand is None:
        display_welcome_banner()
        # T·ª± ƒë·ªông t·∫°o v√† hi·ªÉn th·ªã l·∫°i danh s√°ch l·ªánh
        console.print(ctx.get_help())


# --- ƒê·ªäNH NGHƒ®A L·ªöP NmapScanType T·∫†I ƒê√ÇY ---
class NmapScanType(str, Enum):
    # Nh√≥m Host Discovery
    ping = "ping"
    list_scan = "list"
    no_ping = "no-ping"
    # Nh√≥m Port Scanning
    default = "default"
    tcp_syn = "tcp-syn"
    tcp_connect = "tcp-connect"
    udp = "udp"
    fin = "fin"
    xmas = "xmas"
    null = "null"
    # Nh√≥m Service, OS, Version
    version = "version"
    os_detect = "os-detect"
    aggressive = "aggressive"
    # Nh√≥m Scripting
    script_vuln = "script-vuln"
    script_default = "script-default"

def display_cve_details(cve: dict):
    """H√†m ph·ª• ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt m·ªôt CVE trong m·ªôt Panel."""
    content = Text()
    cve_id = cve.get('id', 'N/A')
    
    published_date = cve.get('published', 'N/A')
    modified_date = cve.get('lastModified', 'N/A')
    content.append(f"Published: {published_date} | Last Modified: {modified_date}\n\n", style="white")

    content.append("M√¥ t·∫£:\n", style="bold")
    description_text = ""
    for desc_item in cve.get("descriptions", []):
        if desc_item.get("lang") == "en":
            description_text = desc_item.get("value", "N/A")
            break
    content.append(f"  {description_text}\n\n")

    metrics = cve.get('metrics', {}).get('cvssMetricV31', [{}])[0]
    if metrics:
        cvss_data = metrics.get('cvssData', {})
        score = cvss_data.get('baseScore', 'N/A')
        severity = cvss_data.get('baseSeverity', 'N/A')
        vector = cvss_data.get('vectorString', 'N/A')
        severity_color = "red" if severity == 'CRITICAL' else "yellow" if severity == 'HIGH' else "white"
        content.append("CVSS Metrics (V3.1):\n", style="bold")
        content.append(f"  - Score: ", style="white")
        content.append(f"{score} ({severity})\n", style=f"bold {severity_color}")
        content.append(f"  - Vector: {vector}\n\n")

    panel = Panel(
        content,
        title=f"[bold cyan]{cve_id}[/bold cyan]",
        border_style="blue",
        expand=True
    )
    console.print(panel)

# THAY TH·∫æ HO√ÄN TO√ÄN H√ÄM SEARCH
@app.command(name="search", help="üîé T√¨m ki·∫øm th√¥ng tin CVE theo t·ª´ kh√≥a ho·∫∑c ID.")
def search(
    keyword: Annotated[str, typer.Argument(help="T·ª´ kh√≥a ho·∫∑c ID ƒë·ªÉ t√¨m ki·∫øm CVE.")],
    min_score: Annotated[float, typer.Option("--min-score", help="L·ªçc CVE c√≥ ƒëi·ªÉm t·ª´ m·ª©c n√†y tr·ªü l√™n.")] = 0.0,
    exact_score: Annotated[float, typer.Option("--exact-score", help="L·ªçc CVE c√≥ ƒëi·ªÉm ch√≠nh x√°c b·∫±ng m·ª©c n√†y.")] = None
):
    """
    T√¨m ki·∫øm TO√ÄN B·ªò CVE v√† hi·ªÉn th·ªã k·∫øt qu·∫£ theo t·ª´ng trang.
    """
    all_results = search_cves(keyword=keyword, console=console)

    if not all_results:
        console.print("[yellow]Kh√¥ng t√¨m th·∫•y CVE n√†o ph√π h·ª£p.[/yellow]")
        return

    total_results = len(all_results)
    results_per_page = 20
    total_pages = math.ceil(total_results / results_per_page)
    current_page = 1

    while True:
        console.clear()
        console.print(f"[bold green]‚úÖ T√¨m th·∫•y {total_results} k·∫øt qu·∫£. ƒêang hi·ªÉn th·ªã trang {current_page}/{total_pages}.[/bold green]")
        
        start_index = (current_page - 1) * results_per_page
        end_index = start_index + results_per_page
        page_results = all_results[start_index:end_index]

        for cve in page_results:
            display_cve_details(cve)

        if total_pages <= 1:
            break

        console.print("\n[bold]ƒêi·ªÅu h∆∞·ªõng:[/bold]")
        console.print("[cyan]n[/cyan] - Trang ti·∫øp theo | [cyan]p[/cyan] - Trang tr∆∞·ªõc | [cyan]q[/cyan] - Tho√°t")
        
        action = typer.prompt("Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n").lower()

        if action == 'n':
            if current_page < total_pages:
                current_page += 1
        elif action == 'p':
            if current_page > 1:
                current_page -= 1
        elif action == 'q':
            break
        else:
            console.print("[red]L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.[/red]")
            typer.prompt("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")



# THAY TH·∫æ HO√ÄN TO√ÄN H√ÄM SOLUTION
@app.command(name="solution", help="üí° T√¨m gi·∫£i ph√°p cho m·ªôt CVE b·∫±ng AI.")
def solution(
    cve_id: Annotated[str, typer.Argument(help="M√£ CVE c·∫ßn t√¨m gi·∫£i ph√°p. V√≠ d·ª•: CVE-2021-44228")]
):
    """
    L·∫•y gi·∫£i ph√°p do AI ƒë·ªÅ xu·∫•t cho m·ªôt m√£ CVE c·ª• th·ªÉ.
    """
    console.print(f"[*] ƒêang t√¨m th√¥ng tin chi ti·∫øt cho {cve_id}...")
    cve_results = search_cves(keyword=cve_id, console=console)
    
    if not cve_results:
        console.print(f"[bold red]L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin cho {cve_id} trong c∆° s·ªü d·ªØ li·ªáu.[/bold red]")
        raise typer.Exit()
        
    cve_info = cve_results[0]
    cve_description = cve_info.get("description", "Kh√¥ng c√≥ m√¥ t·∫£.")
    
    ai_solution = ""
    # --- TH√äM HI·ªÜU ·ª®NG LOADING ---
    with console.status("[bold green]üß† AI ƒëang ph√¢n t√≠ch, vui l√≤ng ch·ªù...[/bold green]", spinner="dots"):
        # G·ªçi h√†m AI b√™n trong kh·ªëi 'status'
        ai_solution = get_ai_solution(cve_id=cve_id, cve_description=cve_description)
    # -----------------------------

    # ƒê√≥ng khung k·∫øt qu·∫£ c·ªßa AI
    console.print(
        Panel(
            ai_solution, 
            title=f"[bold green]‚ú® Ph√¢n t√≠ch c·ªßa AI cho {cve_id} ‚ú®[/bold green]", 
            border_style="green"
        )
    )


# --- L·ªÜNH M·ªöI: SCAN TRIVYs ---
@app.command(name="trivy-scan", help="üî¨ Qu√©t l·ªó h·ªïng trong file ho·∫∑c th∆∞ m·ª•c b·∫±ng Trivy.")
def trivy_scan_command(
    path: Annotated[str, typer.Argument(help="ƒê∆∞·ªùng d·∫´n ƒë·∫øn file ho·∫∑c th∆∞ m·ª•c c·∫ßn qu√©t.")]
):
    """
    üî¨  Qu√©t l·ªó h·ªïng trong file ho·∫∑c th∆∞ m·ª•c b·∫±ng Trivy.
    """
    scan_results = None
    with console.status("[bold yellow]üöÄ ƒêang ch·∫°y Trivy ƒë·ªÉ qu√©t...[/bold yellow]", spinner="dots"):
        scan_results = run_trivy_scan(path)

    if not scan_results or "error" in scan_results:
        error_msg = scan_results.get("error", "L·ªói kh√¥ng x√°c ƒë·ªãnh.")
        console.print(f"[bold red]L·ªói: {error_msg}[/bold red]")
        raise typer.Exit()

    if not scan_results.get("Results"):
        console.print("[bold green]‚úÖ Tuy·ªát v·ªùi! Trivy kh√¥ng t√¨m th·∫•y l·ªó h·ªïng n√†o.[/bold green]")
        return

    for res in scan_results["Results"]:
        if not res.get("Vulnerabilities"):
            continue

        target = res.get("Target")
        console.print(f"\n[bold]B√°o c√°o cho: {target}[/bold]")
        
        table = Table(title="L·ªó h·ªïng ƒë∆∞·ª£c ph√°t hi·ªán b·ªüi Trivy")
        table.add_column("CVE ID", style="cyan", no_wrap=True)
        table.add_column("G√≥i th∆∞ vi·ªán", style="magenta")
        table.add_column("Phi√™n b·∫£n", style="green")
        table.add_column("M·ª©c ƒë·ªô", style="red")
        
        for vuln in res["Vulnerabilities"]:
            table.add_row(
                vuln.get("VulnerabilityID"),
                vuln.get("PkgName"),
                vuln.get("InstalledVersion"),
                vuln.get("Severity")
            )
        
        console.print(table)

# --- L·ªÜNH M·ªöI: NUCLEI-SCAN ---
@app.command(name="nuclei-scan", help="üõ∞Ô∏è  Ch·∫°y qu√©t l·ªó h·ªïng ch·ªß ƒë·ªông v·ªõi Nuclei.")
def nuclei_scan_command(
    target: Annotated[str, typer.Argument(help="M·ª•c ti√™u ƒë·ªÉ qu√©t (URL, domain, ho·∫∑c IP).")]
):
    """
    S·ª≠ d·ª•ng c√¥ng c·ª• Nuclei ƒë·ªÉ th·ª±c hi·ªán qu√©t l·ªó h·ªïng t·ª± ƒë·ªông d·ª±a tr√™n
    c√°c template ƒë∆∞·ª£c c·ªông ƒë·ªìng ƒë√≥ng g√≥p.
    """
    scan_results = None
    with console.status(f"[bold yellow]üöÄ ƒêang ch·∫°y Nuclei ƒë·ªÉ qu√©t {target}...[/bold yellow]", spinner="dots"):
        scan_results = run_nuclei_scan(target)

    if not scan_results or "error" in scan_results:
        error_msg = scan_results.get("error", "L·ªói kh√¥ng x√°c ƒë·ªãnh.")
        console.print(f"[bold red]L·ªói: {error_msg}[/bold red]")
        raise typer.Exit()

    findings = scan_results.get("findings", [])
    if not findings:
        console.print(f"[bold green]‚úÖ Tuy·ªát v·ªùi! Nuclei kh√¥ng t√¨m th·∫•y l·ªó h·ªïng n√†o tr√™n {target}.[/bold green]")
        return

    console.print(f"\n[bold red]üö® C·∫£nh b√°o! Nuclei t√¨m th·∫•y {len(findings)} ph√°t hi·ªán tr√™n {target}:[/bold red]")

    table = Table(title=f"B√°o c√°o Qu√©t Nuclei cho {target}")
    table.add_column("Template ID", style="cyan", no_wrap=True)
    table.add_column("T√™n L·ªó h·ªïng", style="magenta")
    table.add_column("M·ª©c ƒë·ªô", style="red")
    table.add_column("URL ƒë∆∞·ª£c kh·ªõp", style="white")

    for finding in findings:
        info = finding.get("info", {})
        table.add_row(
            finding.get("template-id"),
            info.get("name"),
            info.get("severity"),
            finding.get("matched-at")
        )

    console.print(table)




# --- L·ªÜNH M·ªöI: NMAP-SCAN ---
@app.command(name="nmap-scan", help="üì° Ch·∫°y qu√©t m·∫°ng v√† c·ªïng v·ªõi Nmap.")
def nmap_scan_command(
    target: Annotated[str, typer.Argument(help="M·ª•c ti√™u ƒë·ªÉ qu√©t (URL, domain, IP, ho·∫∑c d·∫£i m·∫°ng).")],
    scan_type: Annotated[NmapScanType, typer.Option("--type", "-t", help="Lo·∫°i qu√©t Nmap c·∫ßn th·ª±c hi·ªán.")] = NmapScanType.default
):
    """
    S·ª≠ d·ª•ng c√¥ng c·ª• Nmap v·ªõi nhi·ªÅu t√πy ch·ªçn qu√©t kh√°c nhau.
    - **Host Discovery:** ping, list, no-ping.
    - **Port Scans:** default (top 100), tcp-syn, tcp-connect, udp, fin, xmas, null.
    - **Advanced:** version, os-detect, aggressive, script-vuln, script-default.
    """
    scan_results = None
    
    # C·∫£nh b√°o cho c√°c ki·ªÉu qu√©t c·∫ßn quy·ªÅn cao ho·∫∑c "·ªìn √†o"
    if scan_type in [NmapScanType.tcp_syn, NmapScanType.os_detect, NmapScanType.aggressive]:
        console.print("[bold yellow]C·∫£nh b√°o: Ki·ªÉu qu√©t n√†y c√≥ th·ªÉ c·∫ßn quy·ªÅn root/administrator ƒë·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c.[/bold yellow]")

    with console.status(f"[bold yellow]üöÄ ƒêang ch·∫°y Nmap (ki·ªÉu: {scan_type.value}) ƒë·ªÉ qu√©t {target}...[/bold yellow]", spinner="dots"):
        scan_results = run_nmap_scan(target, scan_type.value)

    if not scan_results or "error" in scan_results:
        error_msg = scan_results.get("error", "L·ªói kh√¥ng x√°c ƒë·ªãnh.")
        console.print(f"[bold red]L·ªói: {error_msg}[/bold red]")
        raise typer.Exit()

    scan_data = scan_results.get("scan_data", [])
    if not scan_data:
        console.print(f"[bold green]‚úÖ Ho√†n t·∫•t. Nmap kh√¥ng t√¨m th·∫•y th√¥ng tin n·ªïi b·∫≠t tr√™n {target}.[/bold green]")
        return

    console.print(f"\n[bold green]üìä K·∫øt qu·∫£ qu√©t Nmap cho {target}:[/bold green]")
    
    for host in scan_data:
        host_info = f"Host: {host['ip']}"
        if host['hostnames']:
            host_info += f" ({', '.join(host['hostnames'])})"
        
        console.print(f"\n[bold cyan]{host_info}[/bold cyan]")
        
        # Hi·ªÉn th·ªã th√¥ng tin OS n·∫øu c√≥
        if host.get('os'):
            console.print("\n  [bold]H·ªá ƒëi·ªÅu h√†nh ƒë∆∞·ª£c ph√°t hi·ªán:[/bold]")
            for os_match in host['os']:
                console.print(f"    - {os_match['name']} (Ch√≠nh x√°c: {os_match['accuracy']}%)")

        if not host.get('ports') and not host.get('scripts'):
            console.print("  -> Kh√¥ng c√≥ c·ªïng hay script n√†o ƒë∆∞·ª£c ph√°t hi·ªán.")
            continue

        if host['ports']:
            table = Table(title="C√°c c·ªïng ƒë∆∞·ª£c ph√°t hi·ªán")
            table.add_column("Port")
            table.add_column("State")
            table.add_column("Service")
            table.add_column("Product / Version")

            for port in host['ports']:
                version_info = f"{port['product']} {port['version']}".strip()
                table.add_row(
                    f"{port['port']}/{port['protocol']}",
                    port['state'],
                    port['service_name'],
                    version_info
                )
            console.print(table)

        if host.get('scripts'):
            console.print("\n  [bold]K·∫øt qu·∫£ t·ª´ Script Engine (NSE):[/bold]")
            for script in host['scripts']:
                console.print(f"    - [cyan]{script['id']}[/cyan]: {script['output'].strip()}")



# --- L·ªÜNH M·ªöI: SNYK-SCAN ---
@app.command(name="snyk-scan", help="üì¶ Qu√©t l·ªó h·ªïng trong c√°c g√≥i ph·ª• thu·ªôc v·ªõi Snyk.")
def snyk_scan_command(
    path: Annotated[str, typer.Argument(help="ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c d·ª± √°n c·∫ßn qu√©t.")] = "."
):
    """
    S·ª≠ d·ª•ng Snyk ƒë·ªÉ qu√©t c√°c g√≥i m√£ ngu·ªìn m·ªü (open source) v√† t√¨m ra c√°c
    l·ªó h·ªïng b·∫£o m·∫≠t ƒë√£ bi·∫øt trong c√°c th∆∞ vi·ªán b·∫°n ƒëang d√πng.
    """
    scan_output = None
    with console.status(f"[bold yellow]üöÄ ƒêang ch·∫°y Snyk ƒë·ªÉ qu√©t '{path}'...[/bold yellow]", spinner="dots"):
        scan_output = run_snyk_scan(path)

    if not scan_output or "error" in scan_output:
        error_msg = scan_output.get("error", "L·ªói kh√¥ng x√°c ƒë·ªãnh.")
        console.print(f"[bold red]L·ªói: {error_msg}[/bold red]")
        raise typer.Exit()

    total_vulns = 0
    results = scan_output.get("results", [])
    
    for res in results:
        # Ki·ªÉm tra xem Snyk c√≥ b√°o l·ªói cho project n√†y kh√¥ng
        if "error" in res:
            console.print(f"[bold red]L·ªói khi qu√©t {res.get('path', path)}: {res['error']}[/bold red]")
            continue

        vulnerabilities = res.get("vulnerabilities", [])
        total_vulns += len(vulnerabilities)
        
        target_file = res.get("displayTargetFile", res.get("path"))
        console.print(f"\n[bold]B√°o c√°o cho: {target_file}[/bold]")

        if not vulnerabilities:
            console.print("[bold green]‚úÖ Kh√¥ng t√¨m th·∫•y l·ªó h·ªïng n√†o.[/bold green]")
            continue

        table = Table(title=f"T√¨m th·∫•y {len(vulnerabilities)} l·ªó h·ªïng")
        table.add_column("Snyk ID", style="cyan", no_wrap=True)
        table.add_column("G√≥i th∆∞ vi·ªán", style="magenta")
        table.add_column("Phi√™n b·∫£n", style="green")
        table.add_column("M·ª©c ƒë·ªô", style="red")
        table.add_column("Ti√™u ƒë·ªÅ", style="white")

        for vuln in vulnerabilities:
            table.add_row(
                vuln.get("id"),
                vuln.get("packageName"),
                vuln.get("version"),
                vuln.get("severity").capitalize(), # Vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu
                vuln.get("title")
            )
        console.print(table)
    
    if total_vulns > 0:
         console.print(f"\n[bold red]üö® T·ªïng c·ªông t√¨m th·∫•y {total_vulns} l·ªó h·ªïng.[/bold red]")



if __name__ == "__main__":
    app()
